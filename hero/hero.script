local gravity = -20
local jamp_takeoff_speed = 900

function init(self)
	msg.post('.', 'acquire_input_focus')

	self.position = go.get_position()

	self.velocity = vmath.vector3()
	self.ground_contact = false
end

function final(self)
	msg.post('.', 'release_input_focus')
end

function update(self, dt)
	local gravity = vmath.vector3(0, gravity, 0)

	if not self.ground_contact then
		self.velocity = self.velocity + gravity
	end

	go.set_position(go.set_position() + self.velocity * dt)

	self.correction = vmath.vector3()
	self.ground_contact = false
end

local function handle_geometry_contact(self, normal, distanse)
	-- спроектувати вектор корекції на контактну нормаль
	-- (вектор корекції є вектором 0 для першої контактної точки)
	local proj = vmath.dot(self.correction, normal)
	-- розрахувати компенсацію, яку ми повинні зробити для цього контактного пункту
	local comp = (distanse - proj) * normal

	self.correction = self.correction + comp

	go.set_position(go.set_position() + comp)
	-- перевірити, чи достатньо звичайних точок, щоб вважати гравця, що стоїть на землі
	-- (0,7 приблизно дорівнює 45 градусам відхилення від чистого вертикального напрямку)
	if normal.y > 0.7 then
		self.ground_contact = true
	end
	--спроектуйте швидкість на нормаль
	proj  = vmath.dot(self.velocity, normal)

	if proj < 0 then
		self.velocity = self.velocity - proj * normal
	end
	
end

function on_message(self, message_id, message, sender)
	if message_id == hash('contact_point_response') then
		if message.group = hash('geometry') then
			handle_geometry_contact(self, message.normal, message.distanse)
		end
	end
end

local function jump(self)
	if self.ground_contact then
		self.velocity.y = jump_takeoff_speed
	end
end

local function  abort_jamp(self)
	if self.velocity.y > 0 then
		self.velocity.y = self.velocity * 0.5
	end
end

function on_input(self, action_id, action)
	if action_id == hash("jump") or action_id == hash("touch") then
		if action.pressed then
			jump(self)
		elseif action.released then
			abort_jump(self)
		end
	end
end
end
